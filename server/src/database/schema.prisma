generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  Int         @id @default(autoincrement())
  phone_number        String      @unique
  name                String?
  language_preference String      @default("en")
  created_at          DateTime    @default(now())
  otp_code            String?
  otp_expires_at      DateTime?
  city                String?
  constituency        String?
  gram_panchayat      String?
  pin_code            String?     @db.VarChar(6)
  state               String?
  email               String?     @unique
  password_hash       String?
  alerts              Alert[]
  farms               Farm[]
  grievances          Grievance[]

  @@index([pin_code])
  @@index([city])
  @@index([state])
  @@index([constituency])
}

model Farm {
  id                   Int          @id @default(autoincrement())
  user_id              Int
  farm_name            String?
  location_lat         Decimal      @db.Decimal(9, 6)
  location_lon         Decimal      @db.Decimal(9, 6)
  soil_type            String?
  irrigation_source    String?
  area_acres           Decimal?     @db.Decimal(6, 2)
  area_unit            String       @default("acres")
  challenges           String?
  district             String?
  drainage_condition   String?
  equipment            Json?
  irrigation_system    String?
  k_level              Decimal?     @db.Decimal(6, 2)
  livestock            Json?
  n_level              Decimal?     @db.Decimal(6, 2)
  organic_carbon       Decimal?     @db.Decimal(5, 2)
  p_level              Decimal?     @db.Decimal(6, 2)
  photos               Json?
  preferred_language   String?
  previous_crops       Json?
  primary_goal         String?
  rotation_pattern     String?
  soil_ph              Decimal?     @db.Decimal(4, 2)
  soil_test_report_url String?
  state                String?
  village              String?
  water_availability   String?
  cropCycles           CropCycle[]
  user                 User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  metrics              FarmMetrics?
  tasks                Task[]

  @@index([user_id])
}

model CropCycle {
  id                    Int        @id @default(autoincrement())
  farm_id               Int
  crop_name             String
  sowing_date           DateTime
  expected_harvest_date DateTime?
  status                String     @default("active")
  created_at            DateTime   @default(now())
  seed_source           String?
  stage                 String?
  variety               String?
  activities            Activity[]
  farm                  Farm       @relation(fields: [farm_id], references: [id], onDelete: Cascade)
}

model Activity {
  id            Int       @id @default(autoincrement())
  crop_cycle_id Int
  activity_type String
  date          DateTime
  notes         String?
  data          Json?
  cropCycle     CropCycle @relation(fields: [crop_cycle_id], references: [id], onDelete: Cascade)
}

model Task {
  id           Int       @id @default(autoincrement())
  farm_id      Int
  title        String
  status       String    @default("pending")
  due_date     DateTime?
  created_at   DateTime  @default(now())
  completed_at DateTime?
  farm         Farm      @relation(fields: [farm_id], references: [id], onDelete: Cascade)

  @@index([farm_id])
  @@index([status])
}

model FarmMetrics {
  id                Int      @id @default(autoincrement())
  farm_id           Int      @unique
  yield_forecast    Int?
  pest_risk         String?
  water_requirement String?
  updated_at        DateTime @updatedAt
  farm              Farm     @relation(fields: [farm_id], references: [id], onDelete: Cascade)
}

model AdvisoryRule {
  id                 Int     @id @default(autoincrement())
  crop_name          String?
  trigger_event      String
  conditions         Json
  recommendation_key String
  priority           Int     @default(0)
}

model Alert {
  id           Int      @id @default(autoincrement())
  user_id      Int
  alert_type   String
  content_key  String
  is_read      Boolean  @default(false)
  created_at   DateTime @default(now())
  content_text String?
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Admin {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  name          String?
  password_hash String
  role          String   @default("admin")
  created_at    DateTime @default(now())
  username      String?  @unique
}

model Scheme {
  id                  Int       @id @default(autoincrement())
  title               String
  description         String?
  eligibility         String?
  link                String?
  start_date          DateTime?
  end_date            DateTime?
  active              Boolean   @default(true)
  created_at          DateTime  @default(now())
  image_url           String?
  target_city         String?
  target_constituency String?
  target_state        String?
}

model Grievance {
  id          Int      @id @default(autoincrement())
  user_id     Int
  title       String
  description String
  category    String?
  status      String   @default("open")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([status])
}
